{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "微信小程序基础框架搭建",
        "description": "创建微信小程序项目，设置基本页面结构和导航",
        "details": "初始化微信小程序项目，配置app.json、app.wxss和app.js文件。创建主要页面：首页（游戏生成器）、游戏执行页、我的游戏页。设置全局样式和主题色，实现基本导航栏和底部标签栏。",
        "testStrategy": "在微信开发者工具中测试页面跳转和基本UI展示，确保在不同尺寸设备上的适配性。",
        "status": "in-progress",
        "dependencies": []
      },
      {
        "id": 2,
        "title": "用户信息选择界面",
        "description": "实现游戏生成器的信息选择界面",
        "details": "设计并实现信息选择界面，包括家长身份选择（爸爸/妈妈/其他）、孩子年龄段选择、游戏类型偏好（安静类/体能类/语言类/创造类）和可用时间选择（5分钟/10分钟/15分钟以上）。使用微信小程序原生组件实现选择器和按钮。",
        "testStrategy": "测试各选择项的交互效果，确保数据正确保存和传递。进行用户体验测试，确保界面简洁直观。",
        "status": "pending",
        "dependencies": [
          1
        ]
      },
      {
        "id": 3,
        "title": "OpenRouter API接入",
        "description": "集成OpenRouter API，实现与DeepSeek文本模型的通信",
        "details": "注册OpenRouter账号，获取API密钥。封装API调用函数，处理请求和响应。实现错误处理和重试机制。设计缓存策略，减少API调用次数，如每日预生成部分通用游戏。",
        "testStrategy": "测试API连接稳定性，模拟不同网络环境下的响应情况。验证错误处理机制。测量API调用时间和成功率。",
        "status": "pending",
        "dependencies": [
          1
        ]
      },
      {
        "id": 4,
        "title": "游戏生成Prompt设计",
        "description": "设计用于AI游戏生成的Prompt模板",
        "details": "创建结构化的Prompt模板，包括基本指令、游戏类型定义、年龄适应性要求、时间限制说明等。设计输出格式，确保AI返回的游戏方案包含标题、简介和分步骤指导。针对不同选择项组合，优化Prompt以生成最适合的游戏。",
        "testStrategy": "测试不同输入组合下的生成结果，评估游戏质量和适应性。进行A/B测试，比较不同Prompt模板的效果。",
        "status": "pending",
        "dependencies": [
          3
        ]
      },
      {
        "id": 5,
        "title": "游戏生成功能实现",
        "description": "实现'生成'按钮功能，调用API获取游戏方案",
        "details": "实现点击'生成'按钮后的逻辑，收集用户选择的信息，构建API请求参数。显示加载动画，调用OpenRouter API。解析API返回结果，提取游戏标题、简介和步骤。处理生成失败的情况，提供重试选项。",
        "testStrategy": "测试不同输入组合下的生成功能，验证成功率和响应时间。测试错误处理和重试机制。",
        "status": "pending",
        "dependencies": [
          2,
          3,
          4
        ]
      },
      {
        "id": 6,
        "title": "游戏执行流程界面",
        "description": "设计并实现游戏执行页面，支持分步骤引导",
        "details": "创建游戏执行页面，显示游戏标题和简介。实现步骤导航组件，支持'下一步'操作。设计每个步骤的展示样式，包括文字说明和可能的简单图示。实现游戏完成后的成功反馈，包括鼓励语和动画效果。",
        "testStrategy": "测试步骤导航功能，确保用户可以顺利完成整个游戏流程。评估界面友好度和引导清晰度。",
        "status": "pending",
        "dependencies": [
          1,
          5
        ]
      },
      {
        "id": 7,
        "title": "游戏历史记录功能",
        "description": "实现'我的游戏'页面，存储和展示历史生成的游戏",
        "details": "设计游戏数据存储结构，使用微信小程序云数据库或本地存储。实现游戏保存功能，记录游戏标题、简介、步骤和生成时间。创建'我的游戏'列表页面，按时间倒序展示历史游戏。实现游戏详情查看功能。",
        "testStrategy": "测试数据存储和读取功能，验证历史记录的准确性和完整性。测试长期使用后的性能表现。",
        "status": "pending",
        "dependencies": [
          1,
          5
        ]
      },
      {
        "id": 8,
        "title": "重新生成功能",
        "description": "实现'重新生成'按钮，一键获取新游戏",
        "details": "在游戏生成结果页面添加'重新生成'按钮。实现点击后重新调用API，获取新的游戏方案。优化重新生成逻辑，确保新生成的游戏与之前不同。实现用户每日生成次数限制（免费用户每日3次）。",
        "testStrategy": "测试重新生成功能的响应速度和结果差异性。验证每日限制次数功能的正确性。",
        "status": "pending",
        "dependencies": [
          5
        ]
      },
      {
        "id": 9,
        "title": "用户体验优化",
        "description": "优化整体用户体验，确保操作简单直观",
        "details": "优化页面过渡动画，提升流畅感。改进表单控件的触感反馈。优化加载状态提示。实现错误提示的友好展示。调整字体大小和颜色对比度，提高可读性。确保全程操作简单，零学习成本。",
        "testStrategy": "进行用户测试，收集反馈并迭代改进。测量关键操作的完成时间和成功率。",
        "status": "pending",
        "dependencies": [
          2,
          6,
          7,
          8
        ]
      },
      {
        "id": 10,
        "title": "小程序发布准备",
        "description": "准备小程序上线所需材料和配置",
        "details": "准备小程序图标、截图和介绍文案。配置小程序基本信息和服务类目。进行代码审查和优化，减少包大小。设置用户隐私协议。准备提审材料，包括功能演示视频。",
        "testStrategy": "进行全面的功能测试和兼容性测试。检查是否符合微信小程序平台的审核要求。",
        "status": "pending",
        "dependencies": [
          9
        ]
      }
    ],
    "metadata": {
      "lastId": 10,
      "createdAt": "2025-06-23T05:00:00Z",
      "updatedAt": "2025-06-23T05:00:00Z",
      "created": "2025-06-23T05:00:00Z",
      "description": "Tasks for master context",
      "updated": "2025-06-23T06:21:57.690Z"
    }
  }
}